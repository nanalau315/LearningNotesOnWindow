Git: The Other Parts - From Rebasing to Custom Aliases and More

##### Rebasing #####
    - why rebase? we get a much cleaner project history. no unnecessary merge commits! We end up with a linear project history.
    - never rebase commits that have been shared with others. If you have already pushed commits up to Github, DO NOT rebase them unless you are positive no one on the team is using those commits.
    - !!! You do not want to rewrite any git history that other people already have. Its a pain to reconcile the alternate histories.
    - there are two main ways to use the git rebase command:
        - as an alternative to merging
            - by rebasing, it can move the entire feature branch so that it begins at the tip of the master branch. All of the work is still there, but we have re-written history. so instead of using a merge commit, rebasing rewrites history by creating new commits for each of the original feature branch commits
            - first run 
                > git switch <branch-name>
            - then run 
                > git rebase master
        - as a cleanup tool

##### Handling Conflicts and Rebasing #####
    - watch the last video in section 15: Rebasing

##### Cleaning Up History With Interactive Rebase #####
    - sometimes we want to rewrite, delete, rename, or evven reorder commits (before sharing them). We can do this using git rebase!
    - interactive rebase: running git rebase with the -i option will enter the interactive mode, which allows us to edit commits, add files, drop commits, etc. Note that we need to specify how far back we want to rewrite commits. Also, notice that we are not rebasing onto another branch. Instead, we are rebasing a series of commits onto the HEAD they currently are based on. Using the following command will lets you to rebase on the spot where you are at right now.
        > git rebase -i HEAD~<num of commits that you want to go back to edit/delete>
    - next, in our text editor, we'll see a list of commits alongside a list of commands that we can choose from. Here are a couple of the more commonly used commands:
        - pick: use the commit
        - reword: use the commit, but edit the commit message
        - edit: use commit, but stop for amending
        - fixup: use commit contents but meld it into previous commit and discard the commit message.
        - drop: remove commit

##### Git Tags #####
    - tags are pointer that refer to particular points in Git history. We can make a particular moment in time with a tag. Tags are most often used to mark version releases in projects (e.g. v2.1.0)
    - Think of tags as branch references that DO NOT CHANGE. Once a tag is created, it always refers to the same commit. It's just a label for a commit
    - There are two types of git tags we can use: lightweight and annotated tags.
    - lightweight tags are lightweight. they are just a name/label that points to a particular commit.
    - annotated tags store extra meta data including the authoe's name and email, the date, and a tagging message(like a commit message)
        > git tag => will print a list of all the tags in the current repository.
        > git tag -l "*beta*" => to search for tags that match a particular pattern by using the git tag -l and then passing in a wildcard pattern. For example, git tag -l "*beta*" will print a list of tags that include "beta" in their name
        > git checkout <tag> => same as checking out a branch or a specific branch
        > git diff <tag1> <tag2> => to compare the diff between two tags

##### Semantic versioning #####
    - the semantic versioning spec outlines a standardized versioning system for software releases. It provides a consistent way for developers to give meaning to their software releases (how big of a change is this release??) version consist of three numbers separated by periods. official website: https://semver.org/
        - intial release: 1.0.0
        - patch release: 1.0.1 
            - patch releases normally do not contain new features or significant changes. They typically signify bug fixes and other changes that do not impact how the code is used.
        - minor release: 1.1.0
            - minor releases signify that new features or functionality have been added, but the project is still backwards compatible. No breaking changes. The new functionality is optional and should not force users to rewrite their own code.
            - when a new minor releases, the patch number should be reset to 0.
        - major release: 2.0.0
            - major releases signify significant changes that is no longer backwards compatible. features may be removed or changed substantially.
        
##### Creating Lightweight Tags #####
    > git tag <tagname> => to create a lightweight tag. By default, git will create the tag referring to the commit that HEAD is referencing.
    > git tag -a <tagname> => to create an annotated tag. git will then open your default text editor and prompt you for additional information. Similar to git commit, we can also use the -m option to pass a message directly and forgo the opening of the text editor
    > git show <tagname> => will show you the information of the tag
    > git tag <tagname> <commit> => to tag an older commit by provide the commit hash
    > git tag -f <tagname> => git will yell at us if we try to reuse a tag that is already referring to a commit. If we use the -f option, we can FORCE our tag through.
    > git tag -d <tagname> => to delete a tag
    - By default, the gut push command doesn't transfer tags to remote servers. If you have a lot of tags that you want to push up at once, you ccan use the --tags option to the git push command. This will transfer all of your tags to the remote server that are not already there.
        > git push --tags => to push up all tags
        > git push <remote> <tagname> => to push up a single tag

##### Git behind the Scene #####
    - Inside the .git folder: 
        - config: the config is for configutaion. we can config things on a local or global settings in the config file.
        - Refs folder: inside of refs, you will find a heads directory. refs/head contains one file per branch in a repository. Each file is named after a branch and contains the hash of the commit at the tip of the branch. For example refs/heads/master contains the commit hash of the last commit on the master branch. Refs also contains a refs/tags folder which contains one file for each tag in the repo
        - HEAD: just a text file that keeps track of where HEAD points. It if contains refs/heads/master, this means that HEAD is pointing to the master branch. In detached HEAD, the HEAD file contains a commit hash instead of a branch reference.
        - objects: the object directory contains all the repo files. This is where git stores the backups of files, the commits in a repo, and more. The files are all ccompressed and encrypted, so they won't look like much.

##### hashing #####
    - Hashing functions are functions that map input data of some arbitrary size to fixed-size output values.
    - cryptographic hash function: 
        1. one-way function which is infeasible to invert
        2. small change in input yields large change in the output
        3. deterministic - same input yields same output
        4. unlikely to find 2 outputs with same value
    - git uses a hashing function call SHA-1 (thought this is set to change eventually).
        - SHA-1 always generates 40 digit hexadecimal numbers
        - the commit hashes we have seen a million times are the output of SHA-1

##### Git database #####
    - git is a key-value data store. We can insert any kind of content into a git repository, and git will hand us back a unique key we can later use to retrieve that content. These keys that we get back are SHA-1 checksums
    - Hashing with Git hash-object: 
        > echo "<any-word>" | git hash-object --stdin
    - Hashing with Git hasing-object and save in the .git/objects file:
        > echo "<any-word>" | git hash-object --stdin -w
    - Retrieving data: 
        > git cat-file -p <hash>
    - Retrieving data and store them in a specific file
        > git cat-file -p <hash> > <filename>

##### Blobs #####
    - git blobs (binary large object) are the obnject type git uses to store the contents of files in a given repository. Blobs don't even include the filenames of each file or any other data. They just store the contents of a file

##### Trees #####
    - trees are git objects used to store the contents of a directory. Each tree contains pointers that can refer to blobs and to other trees. Each entry in a tree contains the SHA-1 hash of a blob or tree, as well as the mode, type, and filename.
        > git cat-file -p master^{tree} => shows us the most recent tree
        > git cat-file -t <hash> => shows you if it is a tree or a blob

##### Commits #####
    - commits objects combine a tree object along with information about the context that led to the current tree. Commits store a reference to parent commit(s), the author, the commiter, and of couse the commit message! (commit points to a tree)

##### Git Reflog #####
    - Git keeps a record of when the tips of branches and other references were updated in the repo. We can view and update these reference logs using the git reflog command
    - in .git/logs, you will find a folder name HEAD. It is a log that tracks where the HEAD had moved in a more recent time.
    - Limitations! Git only keeps reflogs on your local activity. They are not shared with collaborators. Reflogs also expire. Git cleans out old entries after around 90 days, though this can be configured.
    - the git reflog command accepts subcommands: show, expire, delete, and exists. Show is the only commonly used variant, and it is the default subcommand.
    - git reflog show will show the log of a specific reference (it defaults to HEAD). For example, to view the logs for the tip of the main branch, we could run git reflog show main
        > git reflog show <HEAD or branch-name> => to show the log of what have been done with the HEAD or the branch
        > git reflog => default to show

##### Reflog References #####
    - we can access specific git refs as <branch-name>@{qualifier}. We can use this syntax to access specific ref pointers and can pass them to other commands including checkout, reset, and merge
    - time references: every entry in the reference logs has a timestamp associated with it. We can filter reflogs entries by time/date by using time qualifiers like:
        - git reflog master!{1.day.ago}
        - git checkout bugfix@{3.minutes.ago}
        - yesterday
        - Fri, 12 Feb 2021 14:06:21 -0800
        - git diff main@{0} main@{yesterday}

##### Reflogs Rescue #####
    - we can sometimes use reflog entries to access commits that seem lost and are not appearing in git log
        - first use: git reflog show <branch-name>, find the hash that you want to retrieve, or the <branch-name>@{num}
        - then do: git reset --hard <branch-name OR branch-name@{num}>
    - reminder, this only works on local machine!! And it does expires within 90 days

##### Undoing A Rebase with Reflog #####
    - first: 
        > git reflog show <branch-name>
    - second: 
        > git reset --hard <commit-hash>

##### Global Git Config #####
    - Git looks for the global config file at either ~/.gitconfig or ~/.config/git/config. Any configuration variables that we change in the file will be applied across all Git repos.
    - We can also alter configuration vatiables from the command line if prefered.

##### Git Alias #####
    - we can easily set up Git aliases to make our git experience a but simpler and faster. for example, we could define an alias "git ci" instead of having to type "git commit". Or, we could define a custom git lg command that prints out a custom formatted commit log
    - inside the .gitconfig file, under [alias], write your desire command that shortform the regular longform git command, like:
        [alias]
            s = status => to shortform for git status
            l = log => to shortform git log

##### Setting Aliases From the Command Line #####
    > git config --global alias.<the shortform you want> <the command that you want to make alias for>

##### Aliases with Arguments #####
    - inside the .gitconfig file, do:
        [alias]
            cm = commit -m
            a = add

##### Nice Alias To Have #####
    - https://github.com/GitAlias/gitalias
    - https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
    - https://gist.github.com/mwhite/6887990